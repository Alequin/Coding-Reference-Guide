public class QuickSort {

    private static int[] resultArray;

    /**
     * Sorts an integer array using quick sort.
     * @param inputArray
     * @return
     */
    public static int[] sort(int[] inputArray) {

        resultArray = null;
        if(inputArray == null){
            return resultArray;
        }

        final int length = inputArray.length;

        if (length <= 1) {
            return inputArray;
        }

        resultArray = new int[length];
        System.arraycopy(inputArray, 0, resultArray, 0, length);

        quickSort(0, length - 1);

        return resultArray;
    }

    private static void quickSort(int lowerIndex, int higherIndex) {

        int a = lowerIndex;
        int b = higherIndex;
        int pivot = resultArray[lowerIndex+(higherIndex-lowerIndex)/2];
        while (a <= b) {
            while (resultArray[a] < pivot) {
                a++;
            }
            while (resultArray[b] > pivot) {
                b--;
            }
            if (a <= b) {
                swapIndeces(a, b);
                //move index to next position on both sides
                a++;
                b--;
            }
        }
        if (lowerIndex < b)
            quickSort(lowerIndex, b);
        if (a < higherIndex)
            quickSort(a, higherIndex);
    }

    private static void swapIndeces(int indexOne, int indexTwo) {
        int temp = resultArray[indexOne];
        resultArray[indexOne] = resultArray[indexTwo];
        resultArray[indexTwo] = temp;
    }
}
